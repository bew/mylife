Need to introduce variations!!!
to force specific implementation

This website has a few variations: https://cs.stanford.edu/people/eroberts/courses/soco/projects/2008-09/modeling-natural-systems/gameOfLife2.html

One of them mentions `Cyclic Cellular Automata`:

> In cyclic cellular automata, an ordering of multiple colors is established. Whenever a cell is neighbored by a cell whose color is next in the cycle, it copies that neighbor's color--otherwise, it remains unchanged.
>
> One dimensional cyclic cellular automata can be used to model particles that undergo ballistic annihilation. Cycles involving more than 4 colors tend to produce patterns that stabilize more quickly when compared to 3 or 4-color cycles.

Another website, listing many variants (based on the rules for surviving cells vs born cells):
http://www.mirekw.com/ca/rullex_life.html

Ooooh there is a Maze variant!!!
https://www.conwaylife.com/wiki/OCA:Maze
The maze rule is explosive, which means that most randomly-generated starting patterns will explode in all directions. Nonetheless, there are many still lifes and oscillators under this rule. It has no known spaceships

THIS!!! is the main entry point to everything 'Life' related:
https://www.conwaylife.com/wiki/Main_Page

-----------------

OKAY! So this is the challenge:

Make a Life simulator, that can work on any B/S rules (Birth/Survival). (for any variant of the Life game)
With an infinite grid (<3 <3)

Split the challenge in 2 parts:

[part1]: Partial input parsing (skip rules & output info), store to infinite grid, render back a different view of the grid
[part2]: Full input parsing (game rules, wanted generation, ..), implement the LifeVM (find another name?), play!

For the final output, we ask to print a portion of the grid, by giving 2 points (relative to origin) defining the output rectangle.

>>> Which variations can I bring?
>>> - non-binary cell?
>>>   * cell's age, or a ramp of chars representing its age

INPUT FORMAT (and example):
```
3,5,6       (game rule for new cell birth (3, 5 or 6 neighbors))
2,3         (game rule for surviving cells (2 or 3 neighbors))
-10,-5      (top-left coordinate of the initial grid)
20x10       (size of initial grid WIDTHxHEIGHT)
_x___x____xx__x___xx
__xxx__x_xx_xx___xx_
xxx_xx__x_xx_xx_x_xx
x_xx__xxxx__x__xxx_x  (the initial grid)
__x_x_xx_xxx___x_x_x
_xx__xR__xOx__xx_x__  (in this representation, O shows the 0,0 coordinate (it is dead inside))
x_xx___xx_x_xx__x___  (in this representation, R shows the top-left coordinate of output below)
__xx_x_x__x_x_x__x__  (R & O are not present in the input normally, origin point could be far from the initial grid!)
x_x__xx_x_____xxx_xx
__x_x___x_xx_x__x_x_
42          (wanted generation [0 means no evolution])
3,3         (first coordinate of the wanted output rectangle)
-4,0        (second coordinate of the wanted output rectangle)
```

OUTPUT FORMAT: same as input grid, but on a single line, each grid line separated by '|'.
top left real coordinate: `-4,0`
bottom right real coordinate: `3,3`
```
x__x_x__|_xx_x_xx|_x__x_x_|x_x_____
```
(with ending newline)

============================================
The tricky part about infinite grid, is how to represent the grid, and how to store the cells
And then how to get the neighbors

Best way is to use a `Set[Point]` to keep the alive cells, and work with that (nice for functional programing!).
